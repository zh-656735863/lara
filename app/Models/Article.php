<?php

namespace App\Models;

use App\Observers\ArticleObserver;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * App\Models\Article
 *
 * @property int $id
 * @property int $uid 用户ID
 * @property string $title 标题
 * @property string $desn 描述
 * @property string $cnt 文章内容
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @method static bool|null forceDelete()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Article newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Article newQuery()
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Article onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Article query()
 * @method static bool|null restore()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Article whereCnt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Article whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Article whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Article whereDesn($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Article whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Article whereTitle($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Article whereUid($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Article whereUpdatedAt($value)
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Article withTrashed()
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Article withoutTrashed()
 * @mixin \Eloquent
 */
class Article extends Model
{
    //引入软删除
    use SoftDeletes;
    //删除字段的标识
    protected $tables = ['deleted_at'];
    //事件注册


    protected $dispatchesEvents = [
        'creating' => ArticleObserver::class,
    ];
//未解决问题
//    protected static function boot()
//    {
//        static::observe(ArticleObserver::class);
//        parent::boot(); // TODO: Change the autogenerated stub
//    }
    //指定表明，一个模型对应一个表明
    protected $table = 'article';
    //指定主键，若主键不为'id',这可以设置为当前自增长字段
    protected $primaryKey = 'id';
    //时间戳--这里一定要注意它是用的public
    public $timestamps = true;
    //允许批量赋值的字段$guarded(黑名单)$fildable(白名单)
    protected $guarded = [];
}
